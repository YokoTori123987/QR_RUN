datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

model User {
  id                  String    @id @default(uuid())
  firstName           String?
  lastName            String?
  gender              String?
  dateOfBirth         DateTime?
  imageUrl            String?
  email               String    @unique
  hashedPassword      String
  salt                String
  resetToken          String?
  resetTokenExpiresAt DateTime?
  roles               String    @default("user")
  registertimestamp   DateTime? @default(now())
  Run                 Run[]
  Log                 Log[]
  Lap                 Lap[]
}

model Park {
  id           String         @id @default(uuid())
  park_name    String?
  image_url    String?
  description  String?
  address      String?
  working_time Json?
  Run          Run[]
  Scanner      Scanner[]
  Routescanner Routescanner[]
}

model Run {
  id              String    @id @default(uuid())
  start_timestamp DateTime?
  stop_timestamp  DateTime?
  total_distance  Float?
  pace            Float?
  user            User      @relation(fields: [userId], references: [id])
  userId          String
  park            Park      @relation(fields: [parkId], references: [id])
  parkId          String
}

model Scanner {
  id        String @id @default(uuid())
  park      Park   @relation(fields: [parkId], references: [id])
  parkId    String
  longitude Float?
  latitude  Float?
  Log       Log[]
}

model Log {
  id         String    @id @default(uuid())
  time_stamp DateTime?
  user       User      @relation(fields: [userId], references: [id])
  userId     String
  scanner    Scanner   @relation(fields: [scannerId], references: [id])
  scannerId  String
}

model Lap {
  id              String    @id @default(uuid())
  start_timestamp DateTime?
  stop_timestamp  DateTime?
  user            User      @relation(fields: [userId], references: [id])
  userId          String
}

model Routescanner {
  id             String   @id @default(uuid())
  scanner        String?
  before         String?
  total_distance Float?
  is_start       Boolean?
  is_stop        Boolean?
  park           Park     @relation(fields: [parkId], references: [id])
  parkId         String
}
