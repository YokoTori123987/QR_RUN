datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

model User {
  id                  String    @id @default(uuid())
  firstName           String?
  lastName            String?
  gender              String?
  dateOfBirth         DateTime?
  imageUrl            String?   @default("")
  email               String    @unique
  hashedPassword      String
  salt                String
  resetToken          String?
  resetTokenExpiresAt DateTime?
  roles               String    @default("user")
  registertimestamp   DateTime? @default(now())
  currentCheckPoint   String?
  currentRoad         String?
  Run                 Run[]
  Log                 Log[]
  Lap                 Lap[]
}

model Park {
  id              String            @id @default(uuid())
  parkName        String?
  imageUrl        String?
  description     String?
  address         String?
  workingTime     Json?
  Run             Run[]
  CheckPoint      CheckPoint[]
  RouteCheckPoint RouteCheckPoint[]
}

model Run {
  id             String    @id @default(uuid())
  startTimeStamp DateTime?
  stopTimeStamp  DateTime?
  totalDistance  Float?
  pace           Float?
  user           User      @relation(fields: [userId], references: [id])
  userId         String
  park           Park      @relation(fields: [parkId], references: [id])
  parkId         String
}

model CheckPoint {
  id        String @id @default(uuid())
  longitude Float?
  latitude  Float?
  park      Park   @relation(fields: [parkId], references: [id])
  parkId    String
  Log       Log[]
}

model Log {
  id           String     @id @default(uuid())
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  timeStamp    DateTime
  checkPoint   CheckPoint @relation(fields: [checkPointId], references: [id])
  checkPointId String
}

model Lap {
  id             String   @id @default(uuid())
  startTimeStamp DateTime
  stopTimeStamp  DateTime
  user           User     @relation(fields: [userId], references: [id])
  userId         String
}

model RouteCheckPoint {
  id            String  @id @default(uuid())
  checkPoint    String
  before        String
  totalDistance Float
  isStart       Boolean
  isFinish      Boolean
  park          Park    @relation(fields: [parkId], references: [id])
  parkId        String
}
