generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String    @id @default(cuid())
  gender              String?
  email               String    @unique
  hashedPassword      String
  salt                String
  resetToken          String?
  resetTokenExpiresAt DateTime?
  roles               String    @default("user")
  dateOfBirth         DateTime?
  firstName           String?
  imageUrl            String?   @default("")
  lastName            String?
  registerTimesTamp   DateTime? @default(now())
  Run                 Run[]
  Log                 Log[]
  Lap                 Lap[]
}

model Park {
  id           String         @id @default(cuid())
  park_name    String?
  image_url    String?
  description  String?
  address      String?
  working_time Json?
  Run          Run[]
  Scanner      Scanner[]
  RouteScanner RouteScanner[]
}

model Run {
  id              String    @id @default(cuid())
  start_timestamp DateTime?
  stop_timestamp  DateTime?
  total_distance  Float?
  pace            Float?
  userId          String
  parkId          String
  park            Park      @relation(fields: [parkId], references: [id])
  user            User      @relation(fields: [userId], references: [id])
}

model Scanner {
  id        String @id @default(uuid())
  park      Park   @relation(fields: [parkId], references: [id])
  parkId    String
  longitude Float?
  latitude  Float?
  Log       Log[]
}

model Log {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  scannerId  String
  scanner    Scanner  @relation(fields: [scannerId], references: [id])
  time_stamp DateTime
}

model Lap {
  id               String       @id @default(uuid())
  start_time_stamp DateTime
  stop_time_stamp  DateTime
  route_scannerId  String
  route_scanner    RouteScanner @relation(fields: [route_scannerId], references: [id])
  userId           String
  user             User         @relation(fields: [userId], references: [id])
}

model RouteScanner {
  id             String  @id @default(uuid())
  after          String
  before         String
  total_distance Float
  is_start       Boolean
  is_finish      Boolean
  parkId         String
  park           Park    @relation(fields: [parkId], references: [id])
  Lap            Lap[]
}
